Funções

Uma função é um trecho de código que pode ser chamado (invocado) de qualquer parte do código para executar uma tarefa e retornar um valor. Uma função pode ser executada qualquer número de vezes. Além disso, ela pode receber qualquer número de argumentos e, por via de regra, retornar um valor (quando não se retorna um valor chamamos de rotina). O valor retornado pode ser um inteiro, string ou um array de valores (que continua como sendo um valor).

Quando uma função é invocada o código em execução é parado e só retorna a execução quando a função chamada retorna o valor.

Nomes de funções seguem as mesmas regras que outros rótulo no PHP. Um nome de função válido começa com uma letra ou um sublinhado, seguido, seguido por qualquer número de letras, números ou sublinhado. Com uma expressão regular, seria expressado com: [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*.

Sintaxe

<?php
function foo ($arg_1, $arg_2, /* ..., */ $arg_n)
{
    echo "Exemplo de função.\n";
    return $valor_retornado;
}
?>

Return é a palavra chave para retornar um valor. Usa-se return para tornar o código mais abstrato, ter mais liberdade de poder executá-lo em mais lugares.

Exemplos,

1

function ola() {
	return 'Olá mundo<br>';
}

echo ola();
echo strlen(ola());

2

function salario() {
	return 946.00;
}

$novoSalario = salario() * 3;

// nota: não é possível chamar uma função como uma variável
// Também serve para exibir o valor de uma variável(um pouco exagerado ou necessário em um caso bem particular) isso tudo só é valido dentro de aspas duplas.
// echo "José recebeu 3 salários: {salario() * 3}";

echo "José recebeu 3 salários: {$novoSalario}";

PARÂMETROS DE FUNÇÕES
São informações adicionais que uma função precisa para ser concluída corretamente.

Exemplos

1

function ola($texto) {
	return "Olá $texto <br/>";
}

echo ola("mundo");
echo ola("Luís");
echo ola("Mariliza");

2

Com os parâmetros default, não é necessário passar o valor de um parâmetro.

function ola($texto = "mundo", $periodo = "Bom dia.") {
	return "Olá $texto! $periodo<br/>";
}

echo ola();
echo ola("", "Boa noite."); // para não escrever nada, passe um valor vazio
echo ola("Luís", "Boa tarde.");
echo ola("Mariliza", "");

3

Caso o primeiro argumento não seja default, mas o segundo sim, então se faz necessário fornecer o primeiro argumento. Argumentos obrigatórios devem sempre estar a esquerda na ordem de chamada.

function ola($texto, $periodo = "Bom dia.") {
	return "Olá $texto! $periodo<br/>";
}

4

function ola() {
	$argumentos = func_get_args(); // recupera os argumentos passados
	return $argumentos;
}

var_dump(ola('bom dia', 'luis', 10));

Útil para simular uma sobrecarga de funções.

